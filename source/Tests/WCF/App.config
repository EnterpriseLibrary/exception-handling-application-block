<?xml version="1.0"?>
<configuration>
	<configSections>
		<section name="exceptionHandling" type="EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, EnterpriseLibrary.ExceptionHandling"/>
		<section name="loggingConfiguration" type="EnterpriseLibrary.Logging.Configuration.LoggingSettings, EnterpriseLibrary.Logging"/>
	</configSections>

	<exceptionHandling>
		<exceptionPolicies>
			<add name="WCF Exception Shielding">
				<exceptionTypes>
					<add type="System.ArithmeticException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException" name="ArithmeticException">
						<exceptionHandlers>
							<add type="EnterpriseLibrary.ExceptionHandling.WCF.Tests.MockFaultContractExceptionHandler, EnterpriseLibrary.ExceptionHandling.WCF.Tests" name="Mock Fault Contract Handler"/>
						</exceptionHandlers>
					</add>
					<add type="System.ArgumentNullException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException" name="ArgumentNullException">
						<exceptionHandlers>
							<add type="EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, EnterpriseLibrary.ExceptionHandling.WCF" name="DefaultFaultContract Handler" faultContractType="EnterpriseLibrary.ExceptionHandling.WCF.Tests.MockFaultContract, EnterpriseLibrary.ExceptionHandling.WCF.Tests">
								<mappings>
									<add name="Id" source="{Guid}"/>
								</mappings>
							</add>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<add name="CustomPolicy">
				<exceptionTypes>
					<add type="System.ArgumentException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException" name="ArgumentException">
						<exceptionHandlers>
							<add type="EnterpriseLibrary.ExceptionHandling.WCF.Tests.MockFaultContractExceptionHandler, EnterpriseLibrary.ExceptionHandling.WCF.Tests" name="Mock Fault Contract Handler"/>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<add name="UnhandledLoggedExceptions">
				<exceptionTypes>
					<add type="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException" name="Exception">
						<exceptionHandlers>
							<add name="Logging Handler" type="EnterpriseLibrary.ExceptionHandling.WCF.Tests.MockUnhandledLoggingExceptionHandler, EnterpriseLibrary.ExceptionHandling.WCF.Tests"/>
							<!--Add this handler to send the Exception ID (Guid) to the client for future sync up with the logged ID-->
							<add name="WrapHandler" type="EnterpriseLibrary.ExceptionHandling.WrapHandler, EnterpriseLibrary.ExceptionHandling" wrapExceptionType="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" exceptionMessage="{handlingInstanceID}"/>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<add name="HandledLoggedExceptions">
				<exceptionTypes>
					<add type="System.ArithmeticException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException" name="ArithmeticException">
						<exceptionHandlers>
							<add name="Logging Handler" type="EnterpriseLibrary.ExceptionHandling.WCF.Tests.MockHandledLoggingExceptionHandler, EnterpriseLibrary.ExceptionHandling.WCF.Tests"/>
							<add name="DefaultFaultContract Handler" type="EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EnterpriseLibrary.ExceptionHandling.WCF.Tests.MockFaultContract, EnterpriseLibrary.ExceptionHandling.WCF.Tests"/>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<add name="FaultException">
				<exceptionTypes>
					<add name="FaultException" type="System.ServiceModel.FaultException, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException"/>
				</exceptionTypes>
			</add>
			<add name="ExceptionTypeNotFound">
				<exceptionTypes>
				</exceptionTypes>
			</add>
		</exceptionPolicies>
	</exceptionHandling>

	<loggingConfiguration defaultCategory="Default Category" tracingEnabled="false">
		<logFilters>
			<add name="Category" type="EnterpriseLibrary.Logging.Filters.CategoryFilter, EnterpriseLibrary.Logging" categoryFilterMode="AllowAllExceptDenied">
				<categoryFilters/>
			</add>
		</logFilters>
		<categorySources>
			<add name="Default Category" switchValue="All">
				<listeners>
					<add name="DefaultLogs"/>
				</listeners>
			</add>
			<add name="UnhandledLogs Category" switchValue="All">
				<listeners>
					<add name="UnhandledLogs"/>
				</listeners>
			</add>
			<add name="HandledLogs Category" switchValue="All">
				<listeners>
					<add name="HandledLogs"/>
				</listeners>
			</add>
		</categorySources>
		<specialSources>
			<errors name="errors" switchValue="All">
				<listeners>
					<add name="DefaultLogs"/>
					<add name="UnhandledLogs"/>
					<add name="HandledLogs"/>
				</listeners>
			</errors>
		</specialSources>
		<listeners>
			<add name="DefaultLogs" type="EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener, EnterpriseLibrary.Logging" listenerDataType="EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, EnterpriseLibrary.Logging" fileName="DefaultLogs.txt" formatter="Default Formatter"/>
			<add name="UnhandledLogs" type="EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener, EnterpriseLibrary.Logging" listenerDataType="EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, EnterpriseLibrary.Logging" fileName="UnhandledLogs.txt" formatter="Default Formatter"/>
			<add name="HandledLogs" type="EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener, EnterpriseLibrary.Logging" listenerDataType="EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, EnterpriseLibrary.Logging" fileName="HandledLogs.txt" formatter="Default Formatter"/>
			<!--<add name="Event Log Destination" 
           type="EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener, EnterpriseLibrary.Logging" 
           listenerDataType="EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData, EnterpriseLibrary.Logging" 
           source="Service Factory Exception Handling" formatter="Default Formatter"/>-->
		</listeners>
		<formatters>
			<add name="Default Formatter" type="EnterpriseLibrary.Logging.Formatters.TextFormatter, EnterpriseLibrary.Logging" template="Timestamp: {timestamp}
Message: {message}
Category: {category}
Priority: {priority}
EventId: {eventid}
Severity: {severity}
Title:{title}
Machine: {machine}
Application Domain: {appDomain}
Process Id: {processId}
Process Name: {processName}
Win32 Thread Id: {win32ThreadId}
Thread Name: {threadName}
Extended Properties: {dictionary({key} - {value}
)}"/>
		</formatters>
	</loggingConfiguration>

<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5"/></startup></configuration>
